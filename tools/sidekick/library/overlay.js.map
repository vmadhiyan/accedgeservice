{"version":3,"file":"overlay.js","sources":["../node_modules/@floating-ui/core/dist/floating-ui.core.esm.js","../node_modules/@floating-ui/dom/dist/floating-ui.dom.esm.js","../node_modules/@spectrum-web-components/overlay/src/overlay-stack.ts"],"sourcesContent":["function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = state;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nasync function convertValueToCoords(state, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(state) : value;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(state) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const axis = getMainAxisFromPlacement(placement);\n      const isXAxis = axis === 'x';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isXAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isXAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n","import { rectToClientRect, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { arrow, autoPlacement, detectOverflow, flip, hide, inline, limitShift, offset, shift, size } from '@floating-ui/core';\n\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\n\nfunction getComputedStyle$1(element) {\n  return getWindow(element).getComputedStyle(element);\n}\n\nfunction isNode(value) {\n  return value instanceof getWindow(value).Node;\n}\nfunction getNodeName(node) {\n  return isNode(node) ? (node.nodeName || '').toLowerCase() : '';\n}\n\nlet uaString;\nfunction getUAString() {\n  if (uaString) {\n    return uaString;\n  }\n  const uaData = navigator.userAgentData;\n  if (uaData && Array.isArray(uaData.brands)) {\n    uaString = uaData.brands.map(item => item.brand + \"/\" + item.version).join(' ');\n    return uaString;\n  }\n  return navigator.userAgent;\n}\n\nfunction isHTMLElement(value) {\n  return value instanceof getWindow(value).HTMLElement;\n}\nfunction isElement(value) {\n  return value instanceof getWindow(value).Element;\n}\nfunction isShadowRoot(node) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  const OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle$1(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  // TODO: Try to use feature detection here instead.\n  const isFirefox = /firefox/i.test(getUAString());\n  const css = getComputedStyle$1(element);\n  const backdropFilter = css.backdropFilter || css.WebkitBackdropFilter;\n\n  // This is non-exhaustive but covers the most common CSS properties that\n  // create a containing block.\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (backdropFilter ? backdropFilter !== 'none' : false) || isFirefox && css.willChange === 'filter' || isFirefox && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective'].some(value => css.willChange.includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => {\n    // Add type check for old browsers.\n    const contain = css.contain;\n    return contain != null ? contain.includes(value) : false;\n  });\n}\n\n/**\n * Determines whether or not `.getBoundingClientRect()` is affected by visual\n * viewport offsets. In Safari, the `x`/`y` offsets are values relative to the\n * visual viewport, while in other engines, they are values relative to the\n * layout viewport.\n */\nfunction isClientRectVisualViewportBased() {\n  // TODO: Try to use feature detection here instead. Feature detection for\n  // this can fail in various ways, making the userAgent check the most\n  // reliable:\n  // • Always-visible scrollbar or not\n  // • Width of <html>\n\n  // Is Safari.\n  return /^((?!chrome|android).)*safari/i.test(getUAString());\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\n\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle$1(element);\n  let width = parseFloat(css.width);\n  let height = parseFloat(css.height);\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    fallback: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nconst FALLBACK_SCALE = {\n  x: 1,\n  y: 1\n};\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return FALLBACK_SCALE;\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    fallback\n  } = getCssDimensions(domElement);\n  let x = (fallback ? round(rect.width) : rect.width) / width;\n  let y = (fallback ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  var _win$visualViewport, _win$visualViewport2;\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = FALLBACK_SCALE;\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const win = domElement ? getWindow(domElement) : window;\n  const addVisualOffsets = isClientRectVisualViewportBased() && isFixedStrategy;\n  let x = (clientRect.left + (addVisualOffsets ? ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0 : 0)) / scale.x;\n  let y = (clientRect.top + (addVisualOffsets ? ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0 : 0)) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      iframeRect.x += (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      iframeRect.y += (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += iframeRect.x;\n      y += iframeRect.y;\n      currentIFrame = getWindow(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction getDocumentElement(node) {\n  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;\n}\n\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = {\n    x: 1,\n    y: 1\n  };\n  const offsets = {\n    x: 0,\n    y: 0\n  };\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle$1(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\n\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    // `getParentNode` will never return a `Document` due to the fallback\n    // check, so it's either the <html> or <body> element.\n    return parentNode.ownerDocument.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\n\nfunction getOverflowAncestors(node, list) {\n  var _node$ownerDocument;\n  if (list === void 0) {\n    list = [];\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isClientRectVisualViewportBased();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : {\n    x: 1,\n    y: 1\n  };\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const mutableRect = {\n      ...clippingAncestor\n    };\n    if (isClientRectVisualViewportBased()) {\n      var _win$visualViewport, _win$visualViewport2;\n      const win = getWindow(element);\n      mutableRect.x -= ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0;\n      mutableRect.y -= ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0;\n    }\n    rect = mutableRect;\n  }\n  return rectToClientRect(rect);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle$1(currentNode);\n    const containingBlock = isContainingBlock(currentNode);\n    if (computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !containingBlock && !currentContainingBlockComputedStyle : !containingBlock && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const rect = getBoundingClientRect(element, true, strategy === 'fixed', offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = {\n    x: 0,\n    y: 0\n  };\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent, true);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nconst platform = {\n  getClippingRect,\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  isElement,\n  getDimensions,\n  getOffsetParent,\n  getDocumentElement,\n  getScale,\n  async getElementRects(_ref) {\n    let {\n      reference,\n      floating,\n      strategy\n    } = _ref;\n    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n    const getDimensionsFn = this.getDimensions;\n    return {\n      reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n      floating: {\n        x: 0,\n        y: 0,\n        ...(await getDimensionsFn(floating))\n      }\n    };\n  },\n  getClientRects: element => Array.from(element.getClientRects()),\n  isRTL: element => getComputedStyle$1(element).direction === 'rtl'\n};\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll: _ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = true,\n    animationFrame = false\n  } = options;\n  const ancestorScroll = _ancestorScroll && !animationFrame;\n  const ancestors = ancestorScroll || ancestorResize ? [...(isElement(reference) ? getOverflowAncestors(reference) : reference.contextElement ? getOverflowAncestors(reference.contextElement) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  let observer = null;\n  if (elementResize) {\n    observer = new ResizeObserver(() => {\n      update();\n    });\n    isElement(reference) && !animationFrame && observer.observe(reference);\n    if (!isElement(reference) && reference.contextElement && !animationFrame) {\n      observer.observe(reference.contextElement);\n    }\n    observer.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _observer;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    (_observer = observer) == null ? void 0 : _observer.disconnect();\n    observer = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain CSS positioning\n * strategy.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { autoUpdate, computePosition, getOverflowAncestors, platform };\n","/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { ActiveOverlay } from './ActiveOverlay.js';\nimport type {\n    OverlayOpenCloseDetail,\n    OverlayOpenDetail,\n} from './overlay-types';\nimport { OverlayTimer } from './overlay-timer.js';\nimport '../active-overlay.js';\nimport {\n    findOverlaysRootedInOverlay,\n    parentOverlayOf,\n} from './overlay-utils.js';\nimport { OverlayCloseEvent } from './overlay-events.js';\nimport { getDeepElementFromPoint } from '@spectrum-web-components/shared/src/get-deep-element-from-point.js';\n\nfunction isLeftClick(event: MouseEvent): boolean {\n    return event.button === 0;\n}\n\nfunction hasModifier(event: MouseEvent): boolean {\n    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\ninterface ManagedOverlayContent {\n    open: boolean;\n    // Allow the overlaid content to do something before it is thrown.\n    overlayWillOpenCallback?: (args: { trigger: HTMLElement }) => void;\n    // Allow the overlaid content to do something when it has been thrown.\n    overlayOpenCallback?: (args: { trigger: HTMLElement }) => void;\n    // Allow the overlaid content to do something when its throw has been cancelled.\n    overlayOpenCancelledCallback?: (args: { trigger: HTMLElement }) => void;\n    // Allow the overlaid content to do something before it is recalled, and return `true` if it will self managing the recall.\n    overlayWillCloseCallback?: (args: { trigger: HTMLElement }) => boolean;\n    // Allow the overlaid content to do something when it has been recalled.\n    overlayCloseCallback?: (args: { trigger: HTMLElement }) => void;\n    // Surface possible LitElement lifecycle methods on the synthetically types element.\n    updateComplete?: Promise<boolean>;\n}\n\nfunction nextFrame(): Promise<void> {\n    return new Promise((res) => requestAnimationFrame(() => res()));\n}\n\nexport class OverlayStack {\n    public overlays: ActiveOverlay[] = [];\n\n    private preventMouseRootClose = false;\n    private root: HTMLElement = document.body;\n    private handlingResize = false;\n    private overlayTimer = new OverlayTimer();\n\n    private canTabTrap = true;\n    private trappingInited = false;\n    private tabTrapper!: HTMLElement;\n    private overlayHolder!: HTMLElement;\n    private _eventsAreBound = false;\n\n    constructor() {\n        this.initTabTrapping();\n    }\n\n    private initTabTrapping(): void {\n        /* c8 ignore next 10 */\n        if (document.readyState === 'loading') {\n            document.addEventListener(\n                'readystatechange',\n                () => {\n                    this.initTabTrapping();\n                },\n                { once: true }\n            );\n            return;\n        }\n        if (this.trappingInited) return;\n        this.trappingInited = true;\n        /* c8 ignore next 4 */\n        if (this.document.body.shadowRoot) {\n            this.canTabTrap = false;\n            return;\n        }\n        this.document.body.attachShadow({ mode: 'open' });\n        /* c8 ignore next 3 */\n        if (!this.document.body.shadowRoot) {\n            return;\n        }\n        const root = this.document.body.shadowRoot as ShadowRoot;\n        root.innerHTML = `\n            <style>\n            :host {\n                position: relative;\n            }\n            #actual {\n                position: relative;\n                height: calc(100% - var(--swc-body-margins-block, 0px));\n                z-index: 0;\n                min-height: calc(100vh - var(--swc-body-margins-block, 0px));\n            }\n            #holder {\n                display: none;\n                align-items: center;\n                justify-content: center;\n                flex-flow: column;\n                width: 100%;\n                height: 100%;\n                position: absolute;\n                top: 0;\n                left: 0;\n            }\n            [name=\"open\"]::slotted(*) {\n                pointer-events: all;\n            }\n            #actual[aria-hidden] + #holder {\n                display: flex;\n            }\n            </style>\n            <div id=\"actual\"><slot></slot></div>\n            <div id=\"holder\"><slot name=\"open\"></slot></div>\n        `;\n        this.tabTrapper = root.querySelector('#actual') as HTMLElement;\n        this.overlayHolder = root.querySelector('#holder') as HTMLElement;\n        this.tabTrapper.attachShadow({ mode: 'open' });\n        if (this.tabTrapper.shadowRoot) {\n            this.tabTrapper.shadowRoot.innerHTML = '<slot></slot>';\n        }\n        this.overlayHolder.addEventListener(\n            'contextmenu',\n            this.forwardContextmenuEvent,\n            true\n        );\n        requestAnimationFrame(() => {\n            this.applyBodyMargins();\n            const observer = new ResizeObserver(() => {\n                this.applyBodyMargins();\n            });\n            observer.observe(document.body);\n        });\n    }\n\n    private _bodyMarginsApplied = false;\n\n    private applyBodyMargins(): void {\n        const { marginLeft, marginRight, marginTop, marginBottom } =\n            getComputedStyle(document.body);\n        const allZero =\n            parseFloat(marginLeft) === 0 &&\n            parseFloat(marginRight) === 0 &&\n            parseFloat(marginTop) === 0 &&\n            parseFloat(marginBottom) === 0;\n        if (allZero && !this._bodyMarginsApplied) {\n            return;\n        }\n        this.tabTrapper.style.setProperty(\n            '--swc-body-margins-inline',\n            `calc(${marginLeft} + ${marginRight})`\n        );\n        this.tabTrapper.style.setProperty(\n            '--swc-body-margins-block',\n            `calc(${marginTop} + ${marginBottom})`\n        );\n        this._bodyMarginsApplied = !allZero;\n    }\n\n    private startTabTrapping(): void {\n        this.initTabTrapping();\n        /* c8 ignore next 3 */\n        if (!this.canTabTrap) {\n            return;\n        }\n        this.tabTrapper.tabIndex = -1;\n        this.tabTrapper.setAttribute('aria-hidden', 'true');\n    }\n\n    private stopTabTrapping(): void {\n        /* c8 ignore next 3 */\n        if (!this.canTabTrap || !this.trappingInited) {\n            return;\n        }\n        this.tabTrapper.removeAttribute('tabindex');\n        this.tabTrapper.removeAttribute('aria-hidden');\n    }\n\n    private forwardContextmenuEvent = async (\n        event: MouseEvent\n    ): Promise<void> => {\n        const topOverlay = this.overlays[this.overlays.length - 1];\n        if (\n            !this.trappingInited ||\n            topOverlay.interaction !== 'modal' ||\n            event.target !== this.overlayHolder\n        ) {\n            return;\n        }\n        event.stopPropagation();\n        event.preventDefault();\n        await this.closeTopOverlay();\n        getDeepElementFromPoint(event.clientX, event.clientY)?.dispatchEvent(\n            new MouseEvent('contextmenu', event)\n        );\n    };\n\n    private get document(): Document {\n        return this.root.ownerDocument /* c8 ignore next */ || document;\n    }\n\n    private get topOverlay(): ActiveOverlay | undefined {\n        return this.overlays.slice(-1)[0];\n    }\n\n    private findOverlayForContent(\n        overlayContent: HTMLElement\n    ): ActiveOverlay | undefined {\n        for (const item of this.overlays) {\n            if (overlayContent === item.overlayContent) {\n                return item;\n            }\n        }\n        return undefined;\n    }\n\n    private addEventListeners(): void {\n        if (this._eventsAreBound) return;\n        this._eventsAreBound = true;\n        this.document.addEventListener('click', this.handleMouseCapture, true);\n        this.document.addEventListener('click', this.handleMouse);\n        this.document.addEventListener('keydown', this.handleKeydown);\n        this.document.addEventListener(\n            'sp-overlay-close',\n            this.handleOverlayClose as EventListener\n        );\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    handleOverlayClose = (event: OverlayCloseEvent): void => {\n        const { root } = event;\n        if (!root) return;\n        this.closeOverlaysForRoot(root);\n    };\n\n    private isClickOverlayActiveForTrigger(trigger: HTMLElement): boolean {\n        return this.overlays.some(\n            (item) => trigger === item.trigger && item.interaction === 'click'\n        );\n    }\n\n    public async openOverlay(details: OverlayOpenDetail): Promise<boolean> {\n        this.addEventListeners();\n        if (this.findOverlayForContent(details.content)) {\n            return false;\n        }\n        if (details.notImmediatelyClosable) {\n            this._doesNotCloseOnFirstClick = true;\n        }\n        if (details.interaction === 'modal') {\n            this.startTabTrapping();\n        }\n\n        const contentWithLifecycle =\n            details.content as unknown as ManagedOverlayContent;\n        const { trigger } = details;\n        if (contentWithLifecycle.overlayWillOpenCallback) {\n            contentWithLifecycle.overlayWillOpenCallback({ trigger });\n        }\n\n        if (details.delayed) {\n            const cancelledPromise = this.overlayTimer.openTimer(\n                details.content\n            );\n            const promises = [cancelledPromise];\n            if (details.abortPromise) {\n                promises.push(details.abortPromise);\n            }\n            const cancelled = await Promise.race(promises);\n            if (cancelled) {\n                if (contentWithLifecycle.overlayOpenCancelledCallback) {\n                    contentWithLifecycle.overlayOpenCancelledCallback({\n                        trigger,\n                    });\n                }\n                return cancelled;\n            }\n        }\n\n        if (details.root) {\n            this.closeOverlaysForRoot(details.root);\n        }\n        if (details.interaction === 'click') {\n            this.closeAllHoverOverlays();\n        } else if (\n            details.interaction === 'hover' &&\n            this.isClickOverlayActiveForTrigger(details.trigger)\n        ) {\n            // Don't show a hover popover if the click popover is already active\n            return true;\n        }\n\n        const activeOverlay = ActiveOverlay.create(details);\n\n        if (this.overlays.length) {\n            const topOverlay = this.overlays[this.overlays.length - 1];\n            topOverlay.obscure(activeOverlay.interaction);\n        }\n\n        document.body.appendChild(activeOverlay);\n\n        /**\n         * The following work to make the new overlay the \"top\" of the stack\n         * has to happen AFTER the current call stack completes in case there\n         * is work there in to remove the previous \"top\" overlay.\n         */\n        await nextFrame();\n        this.overlays.push(activeOverlay);\n        await activeOverlay.updateComplete;\n        this.addOverlayEventListeners(activeOverlay);\n        if (typeof contentWithLifecycle.open !== 'undefined') {\n            await nextFrame();\n            // Without the rAF Firefox gets here to early\n            // and is not able trigger the animation.\n            contentWithLifecycle.open = true;\n        }\n        let cb: () => Promise<void> | void = () => {\n            return;\n        };\n        if (contentWithLifecycle.overlayOpenCallback) {\n            const { trigger } = activeOverlay;\n            const { overlayOpenCallback } = contentWithLifecycle;\n            cb = async () => await overlayOpenCallback({ trigger });\n        }\n        await activeOverlay.openCallback(cb);\n        return false;\n    }\n\n    public addOverlayEventListeners(activeOverlay: ActiveOverlay): void {\n        activeOverlay.addEventListener('close', (() => {\n            this.hideAndCloseOverlay(\n                activeOverlay,\n                true // animated?\n            );\n        }) as EventListener);\n        switch (activeOverlay.interaction) {\n            case 'replace':\n                this.addReplaceOverlayEventListeners(activeOverlay);\n                break;\n            case 'inline':\n                this.addInlineOverlayEventListeners(activeOverlay);\n                break;\n        }\n    }\n\n    public addReplaceOverlayEventListeners(activeOverlay: ActiveOverlay): void {\n        activeOverlay.addEventListener('keydown', (event: KeyboardEvent) => {\n            const { code } = event;\n            /* c8 ignore next */\n            if (code !== 'Tab') return;\n\n            event.stopPropagation();\n            this.closeOverlay(activeOverlay.overlayContent);\n            activeOverlay.tabbingAway = true;\n            activeOverlay.trigger.focus();\n            activeOverlay.trigger.dispatchEvent(\n                new KeyboardEvent('keydown', event)\n            );\n        });\n    }\n\n    public addInlineOverlayEventListeners(activeOverlay: ActiveOverlay): void {\n        activeOverlay.trigger.addEventListener(\n            'keydown',\n            activeOverlay.handleInlineTriggerKeydown\n        );\n        activeOverlay.addEventListener('keydown', (event: KeyboardEvent) => {\n            const { code, shiftKey } = event;\n            /* c8 ignore next */\n            if (code !== 'Tab') return;\n\n            activeOverlay.tabbingAway = true;\n            if (shiftKey) {\n                const returnFocusElement = document.createElement('span');\n                returnFocusElement.tabIndex = -1;\n                if (activeOverlay.trigger.hasAttribute('slot')) {\n                    returnFocusElement.slot = activeOverlay.trigger.slot;\n                }\n                activeOverlay.trigger.insertAdjacentElement(\n                    'afterend',\n                    returnFocusElement\n                );\n                returnFocusElement.focus();\n                returnFocusElement.remove();\n                return;\n            }\n\n            event.stopPropagation();\n            const triggerWithLifecycle =\n                activeOverlay.trigger as unknown as ManagedOverlayContent;\n            if (typeof triggerWithLifecycle.open !== 'undefined') {\n                triggerWithLifecycle.open = false;\n            }\n            this.closeOverlay(activeOverlay.overlayContent);\n            activeOverlay.trigger.focus();\n        });\n    }\n\n    public closeOverlay(content: HTMLElement): void {\n        this.overlayTimer.close(content);\n        requestAnimationFrame(() => {\n            const overlayFromContent = this.findOverlayForContent(content);\n            const overlaysToClose = [overlayFromContent];\n            overlaysToClose.push(\n                ...findOverlaysRootedInOverlay(\n                    overlayFromContent,\n                    this.overlays\n                )\n            );\n            overlaysToClose.forEach((overlay) =>\n                this.hideAndCloseOverlay(overlay)\n            );\n        });\n    }\n\n    private handleMouseCapture = (event: MouseEvent): void => {\n        const topOverlay = this.topOverlay;\n        if (\n            !event.target ||\n            !topOverlay ||\n            !topOverlay.overlayContent ||\n            hasModifier(event) ||\n            !isLeftClick(event)\n        ) {\n            this.preventMouseRootClose = true;\n            return;\n        }\n\n        if (event.target instanceof Node) {\n            const path = event.composedPath();\n            if (path.indexOf(topOverlay.overlayContent) >= 0) {\n                this.preventMouseRootClose = true;\n                return;\n            }\n            this.preventMouseRootClose = false;\n        }\n    };\n\n    private closeAllHoverOverlays(): void {\n        for (const overlay of this.overlays) {\n            if (overlay.interaction === 'hover') {\n                this.hideAndCloseOverlay(overlay, false);\n            }\n        }\n    }\n\n    private closeOverlaysForRoot(root: HTMLElement): void {\n        const overlaysToClose: ActiveOverlay[] = [];\n        for (const overlay of this.overlays) {\n            if (overlay.root && overlay.root === root) {\n                overlaysToClose.push(overlay);\n                overlaysToClose.push(\n                    ...findOverlaysRootedInOverlay(overlay, this.overlays)\n                );\n            }\n        }\n        overlaysToClose.forEach((overlay) =>\n            this.hideAndCloseOverlay(overlay, true, true)\n        );\n    }\n\n    private async manageFocusAfterCloseWhenOverlaysRemain(\n        returnBeforeFocus?: boolean,\n        previousTrigger?: HTMLElement\n    ): Promise<void> {\n        const topOverlay = this.overlays[this.overlays.length - 1];\n        topOverlay.feature();\n        // Push focus in the the next remaining overlay as needed when a `type=\"modal\"` overlay exists.\n        if (topOverlay.interaction === 'modal' || topOverlay.hasModalRoot) {\n            if (returnBeforeFocus) return;\n            await (previousTrigger || topOverlay).focus();\n        } else {\n            this.stopTabTrapping();\n        }\n    }\n\n    private manageFocusAfterCloseWhenLastOverlay(overlay: ActiveOverlay): void {\n        this.stopTabTrapping();\n        const isModal = overlay.interaction === 'modal';\n        const isReceivesFocus = overlay.receivesFocus === 'auto';\n        const isReplace = overlay.interaction === 'replace';\n        const isInline = overlay.interaction === 'inline';\n        const isTabbingAwayFromInlineOrReplace =\n            (isReplace || isInline) && !overlay.tabbingAway;\n        overlay.tabbingAway = false;\n        if (!isModal && !isReceivesFocus && !isTabbingAwayFromInlineOrReplace) {\n            return;\n        }\n        // Manage post closure focus when needed.\n        const overlayRoot = overlay.overlayContent.getRootNode() as ShadowRoot;\n        const overlayContentActiveElement = overlayRoot.activeElement;\n        let triggerRoot: ShadowRoot;\n        let triggerActiveElement: Element | null;\n        const contentContainsActiveElement = (): boolean =>\n            overlay.overlayContent.contains(overlayContentActiveElement);\n        const triggerRootContainsActiveElement = (): boolean => {\n            triggerRoot = overlay.trigger.getRootNode() as ShadowRoot;\n            triggerActiveElement = triggerRoot.activeElement;\n            return triggerRoot.contains(triggerActiveElement);\n        };\n        const triggerHostIsActiveElement = (): boolean =>\n            triggerRoot.host && triggerRoot.host === triggerActiveElement;\n        // Return focus to the trigger as long as the user hasn't actively focused\n        // something outside of the current overlay interface; trigger, root, host.\n        if (\n            isModal ||\n            contentContainsActiveElement() ||\n            triggerRootContainsActiveElement() ||\n            triggerHostIsActiveElement()\n        ) {\n            overlay.trigger.focus();\n        }\n    }\n\n    private async hideAndCloseOverlay(\n        overlay?: ActiveOverlay,\n        animated?: boolean,\n        returnBeforeFocus?: boolean\n    ): Promise<void> {\n        if (!overlay) {\n            return;\n        }\n        const contentWithLifecycle =\n            overlay.overlayContent as unknown as ManagedOverlayContent;\n        if (\n            typeof contentWithLifecycle.overlayWillCloseCallback !== 'undefined'\n        ) {\n            const { trigger } = overlay;\n            if (contentWithLifecycle.overlayWillCloseCallback({ trigger })) {\n                return;\n            }\n        }\n        await overlay.hide(animated);\n        if (typeof contentWithLifecycle.open !== 'undefined') {\n            contentWithLifecycle.open = false;\n        }\n        if (contentWithLifecycle.overlayCloseCallback) {\n            const { trigger } = overlay;\n            await contentWithLifecycle.overlayCloseCallback({ trigger });\n        }\n\n        if (overlay.state != 'dispose') return;\n\n        const index = this.overlays.indexOf(overlay);\n        if (index >= 0) {\n            this.overlays.splice(index, 1);\n        }\n\n        if (this.overlays.length) {\n            await this.manageFocusAfterCloseWhenOverlaysRemain(\n                returnBeforeFocus || overlay.interaction === 'hover',\n                overlay.trigger\n            );\n        } else {\n            this.manageFocusAfterCloseWhenLastOverlay(overlay);\n        }\n\n        await overlay.updateComplete;\n        overlay.remove();\n        overlay.dispose();\n\n        overlay.trigger.dispatchEvent(\n            new CustomEvent<OverlayOpenCloseDetail>('sp-closed', {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n                detail: {\n                    interaction: overlay.interaction,\n                },\n            })\n        );\n    }\n\n    private closeTopOverlay(): Promise<void> {\n        return this.hideAndCloseOverlay(this.topOverlay, true);\n    }\n\n    /**\n     * A \"longpress\" occurs before the \"click\" that creates it has occured.\n     * In that way the first click will still be part of the \"longpress\" and\n     * not part of closing the overlay.\n     */\n    private _doesNotCloseOnFirstClick = false;\n\n    private handleMouse = (event: Event): void => {\n        if (this._doesNotCloseOnFirstClick) {\n            this._doesNotCloseOnFirstClick = false;\n            return;\n        }\n        if (this.preventMouseRootClose || event.defaultPrevented) {\n            return;\n        }\n        const overlaysToClose = [];\n        /**\n         * Find the first overlay that should be closed by this and include it in the\n         * array of overlays for closure.\n         *\n         * Event path dictates closure while the click event:\n         * - did not occur within the overlay content of the overlay\n         * AND was\n         * - not triggered by something in the click event's composed path\n         * OR\n         * - not a \"hover\" overlay\n         * Select the overlay for closure\n         */\n        let index = this.overlays.length;\n        while (index && overlaysToClose.length === 0) {\n            index -= 1;\n            const overlay = this.overlays[index];\n            const path = event.composedPath();\n            const eventPathDictatesClosure =\n                (!path.includes(overlay.trigger) ||\n                    overlay.interaction !== 'hover') &&\n                !path.includes(overlay.overlayContent);\n            if (eventPathDictatesClosure) {\n                overlaysToClose.push(overlay);\n            }\n        }\n        let root: HTMLElement | undefined = this.topOverlay?.root;\n        let overlay = parentOverlayOf(root);\n        while (root && overlay) {\n            overlaysToClose.push(overlay);\n            overlay = parentOverlayOf(root);\n            root = overlay?.root;\n        }\n        if (overlay) {\n            overlaysToClose.push(overlay);\n        }\n        overlaysToClose.forEach((overlay) => this.hideAndCloseOverlay(overlay));\n    };\n\n    private handleKeydown = (event: KeyboardEvent): void => {\n        if (event.code === 'Escape') {\n            this.closeTopOverlay();\n        }\n    };\n\n    private handleResize = (): void => {\n        if (this.handlingResize) return;\n\n        this.handlingResize = true;\n        requestAnimationFrame(async () => {\n            const promises = this.overlays.map((overlay) =>\n                overlay.updateOverlayPosition()\n            );\n            await Promise.all(promises);\n            this.handlingResize = false;\n        });\n    };\n}\n"],"names":["getAlignment","placement","split","getLengthFromAxis","axis","getSide","getMainAxisFromPlacement","includes","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","isVertical","coords","getSideObjectFromPadding","padding","top","right","bottom","left","rectToClientRect","rect","async","detectOverflow","state","options","_await$platform$isEle","platform","rects","elements","strategy","boundary","rootBoundary","elementContext","altBoundary","paddingObject","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","min","Math","max","within","min$1","value","max$1","oppositeSideMap","getOppositePlacement","replace","side","oppositeAlignmentMap","start","end","getOppositeAlignmentPlacement","alignment","flip","name","_middlewareData$flip","middlewareData","initialPlacement","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","detectOverflowOptions","isBasePlacement","isRTL","oppositePlacement","push","direction","list","isStart","lr","rl","tb","bt","map","concat","placements","overflow","overflows","overflowsData","main","cross","mainAlignmentSide","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","data","reset","resetPlacement","filter","d","sort","a","b","_overflowsData$map$so","reduce","acc","offset","diffCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","size","apply","isXAxis","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","shift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions","getDimensions","getWindow","node","_node$ownerDocument","ownerDocument","defaultView","window","getComputedStyle$1","getComputedStyle","isNode","Node","getNodeName","nodeName","toLowerCase","uaString","getUAString","uaData","navigator","userAgentData","Array","isArray","brands","item","brand","version","join","userAgent","isHTMLElement","HTMLElement","Element","isShadowRoot","ShadowRoot","isOverflowElement","overflowX","overflowY","display","test","isTableElement","isContainingBlock","isFirefox","css","backdropFilter","WebkitBackdropFilter","transform","perspective","willChange","some","contain","isClientRectVisualViewportBased","isLastTraversableNode","round","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","fallback","unwrapElement","FALLBACK_SCALE","domElement","getBoundingClientRect","Number","isFinite","includeScale","isFixedStrategy","_win$visualViewport","_win$visualViewport2","clientRect","scale","win","addVisualOffsets","visualViewport","offsetLeft","offsetTop","offsetWin","currentIFrame","frameElement","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","document","documentElement","getNodeScroll","scrollLeft","scrollTop","pageXOffset","pageYOffset","getWindowScrollBarX","getParentNode","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","scrollableAncestor","isBody","getClientRectFromClippingAncestor","clippingAncestor","html","clientWidth","clientHeight","visualViewportBased","scroll","scrollWidth","scrollHeight","mutableRect","getTrueOffsetParent","polyfill","position","currentNode","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","offsetRect","clippingAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","containingBlock","ancestor","set","this","_c","firstClippingAncestor","clippingRect","accRect","getOffsetParentFn","getDimensionsFn","getClientRects","from","computePosition","Map","mergedOptions","platformWithCache","config","middleware","validMiddleware","Boolean","getElementRects","statefulPlacement","resetCount","i","fn","nextX","nextY","limiter","mainAxisCoord","crossAxisCoord","maxSide","limitedCoords","arrowDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","center","shouldAddOffset","centerOffset","update","ancestorScroll","_ancestorScroll","ancestorResize","elementResize","animationFrame","ancestors","forEach","addEventListener","passive","frameId","observer","ResizeObserver","observe","prevRefRect","frameLoop","nextRefRect","requestAnimationFrame","_observer","removeEventListener","disconnect","cancelAnimationFrame","ctrlKey"],"mappings":"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"}